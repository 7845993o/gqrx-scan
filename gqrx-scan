#!/usr/bin/perl

# A channel or frequency scanner for GQRX.  Remote Control must be enabled in GQRX
# Channel mode is driven by a CSV file of the format HZ,MODE,NAME or same as the
# output of the GQRX Remote application

use Net::Telnet;
use Time::HiRes;
use Getopt::Long;

# Handle all signals
use sigtrap qw/handler signal_handler normal-signals/;

# Be strict in our parsing
use strict;

# Some defaults, all of these can be over-ridden by options except $levelwait

# Location of the CSV file to scan
my $csv = "/opt/gqrx-remote/gqrx-bookmarks.csv";

# Location of file which will pause scanning
my $home = $ENV{"HOME"};
my $pausefile = "$home/.gqrx-pause.txt";        

# Log file
my $logfile = "/home/wally/baofeng/gqrxscan.log";

# Delay scanning if we hear a signal
my $levelstop = 1;

# Default Level that will cause a scanning delay
my $delaylevel = "-40";

# Time delay before checking signal level after changing channels
# Increase this if you find it going to the next channel then waiting
# when a signal is detected, it seems to take a while to detect
my $levelwait = ".3";

# Time to wait if signal is detected
my $delaytime = "5";

# Time between switching channels/frequencies (cannot be less than
# the time it takes to determine the signal level)
my $pause = 0.5;

# Hz to increment by in frequency scan mode
my $step = "5000";

### No need to touch below here

# Available GQRX demodulation modes
my @modes = ("AM", "FM", "WFM", "WFM_ST", "LSB", "USB", "CW", "CWL", "CWU");

# Other globals to declare for options
my ($type, $mode, $start, $end, $channel, $channels, $showall, $pattern, $exclude,
	$stop, $wait, $record, $monitor, $dumpchannels, $help);

# Other globals we use elsewhere
my (@exclude, @channels, @csv);

# Our maximum channel name width
my $namewidth = 25;

# Flag to track if we're recording in monitor mode
my $recordingmonitor = 0;

# Track how many seconds we've recorded
my $recordtime = 0;

# Track the most active frequency/channel
my %mostactive;

# Track how long we've been scanning
my $timestarted = time;

# Save the argument list to logfile
my @args = @ARGV;

# Get our command line options
GetOptions(
	'type=s' => \$type,
	'mode:s' => \$mode,
	'start:s' => \$start,
	'end:s' => \$end,
	'channel:s' => \$channel,
	'channels:s' => \$channels,
	'showall' => \$showall,
	'step:s' => \$step,
	'pattern=s' => \$pattern,
	'exclude=s' => \$exclude,
	'delaylevel:s' => \$delaylevel,
	'delaytime:f' => \$delaytime,
	'pause:s' => \$pause,
	'stop' => \$stop,
	'wait' => \$wait,
	'levelstop:s' => \$levelstop,
	'record' => \$record,
	'monitor' => \$monitor,
	'dumpchannels' => \$dumpchannels,
	'help' => \$help
	);

# Check sane usage for different modes
checkusage();

# Print some information at the beginning of the run
header();

logfile("Started scanning.  Arguments: " . join(" ", @args) . "\n");

# Remove our pause file if we're starting with it existing
if (-e $pausefile) { unlink $pausefile; }

# Sanity check some settings

# Our channel delay can't be less than our levelwait variable
if ($pause < $levelwait ) { $pause = $levelwait; }

# We don't want an insanely low step do we?
if ("$step" < 100) { $step = "100"; }

if ($monitor) { $levelstop = 0; }

# Initiate our telnet connection
my $t = new Net::Telnet (Timeout => 2,
	port => '7356',
	);

$t->open('127.0.0.1');

if ($type eq "file")
{
	$| = 1;
	my $fileline = 0;
	my $monitoring = 0;
	unless (-e "$csv")
	{
		die "Bookmark file does not exist:  $csv\n";
	}

	# Retrieve our current frequency
	$t->print("f");
	my ($prematch, $tmpfreq) = $t->waitfor(Match => '/\d{7,10}/', Timeout => 5, Errmode => "return");
	chomp($tmpfreq);

	# If we get a 1 back, skip tuning until we match a frequency
	my $skiptune = loadcsv($tmpfreq);
	while (1)
	{
		foreach(@csv)
		{
			my $line = $_;
			my $tune = 0;
			my $excluded = 0;
			chomp($line);
			my ($freq,$mode,@name) = split(',',$line);
			if ($freq eq "" || $mode eq "")
			{
				print "Invalid bookmark line: [$line]\n";
				sleep 1;
			}
			$freq =~ s/[^0-9]//g;
			$mode =~ s/[^A-Z]//g;
			my $name = join(" ",@name);
			$name =~ s/[^a-zA-Z0-9 ]//g;
			my $curfreq = prettyfreq($freq);

			# If we have channels, match them up and tune

			# If we're in monitor mode, don't skip tuning the one time
			if ($monitor) { $skiptune = 0; }
			# Don't check if we're skipping tuning
			unless($skiptune)
			{
				if (@channels)
				{
					foreach(@channels)
					{
						if ($fileline eq $_)
						{
							$tune = 1;
							last;
						}
					}
				}
				# If no channels, and no pattern, tune in
				elsif ($pattern eq "")
				{
					$tune = 1;
				}
				# If we specified a pattern, match it up
				elsif  ($pattern && (($name =~ /$pattern/) || ($curfreq =~ /$pattern/)))
				{
					$tune = 1;
				}

				# Exclude frequencies
				foreach(@exclude)
				{
					if ($freq eq $_ || $name =~ /$_/)
					{
						$tune = 0;
						$excluded = 1;
						last;
					}
				}
			}

			# Just dump the channel list if asked
			if ($dumpchannels) { $tune = 0; }

			# If we matched, tune in
			if ($tune)
			{
				tune($freq, $mode, $curfreq, $name, $fileline, "", "", $monitoring);
			}
			else
			{
				if ($showall || $excluded || $dumpchannels)
				{
					printf('%12s' . " - " . "%${namewidth}s" . " - [" . '%5s' . "] [" . '%5s' . "] [Line " . '%3s' . "] --- Skipped\n",$curfreq,$name,$mode,"n/a",$fileline);
				}
			}
			$fileline++;

			# If our channel frequency matches, disable skipping
			if ($tmpfreq eq $freq && $skiptune)
			{
				$skiptune = 0;
			}

			while (-e $pausefile)
			{
				print "\rWaiting to resume...";
				Time::HiRes::sleep($levelwait);
			}
			print "\r";
		}
		if ($dumpchannels) { last; }
		$fileline = 0;
		if ($monitor)
		{
			$monitoring = 1;
		}
		else
		{
			repeatheader();
		}
	}
}

if ($type eq "scan")
{
	my $monitoring = 0;
	# Retrieve our current frequency
	$t->print("f");
	my ($prematch, $tmpfreq) = $t->waitfor(Match => '/\d{7,10}/', Timeout => 5, Errmode => "return");
	chomp($tmpfreq);
	my $freq = $start;
	# If our current frequency is within our boundaries, start from there
	if ($monitor)
	{
		$end = $start;
	}
	elsif ($tmpfreq >= $start && $tmpfreq <= $end)
	{
		$freq = $tmpfreq;
		my $curfreq = prettyfreq($freq);
		print "Continuing from $curfreq\n\n";
	}

	$| = 1;
	while ( 1 )
	{
		my $tune = 1;
		my $curfreq = prettyfreq($freq);
		my $startfreq = prettyfreq($start);
		my $endfreq = prettyfreq($end);

		# Exclude frequencies
		if (@exclude)
		{
			foreach(@exclude)
			{
				if ($freq eq $_)
				{
					$tune = 0;
					last;
				}
			}
		}
		if ($tune)
		{
			tune($freq, $mode, $curfreq, "", "", $startfreq, $endfreq,$monitoring);
		}
		else
		{
			print "Skipped $freq\n";
		}

		if ($monitor)
		{
			$monitoring = 1;
		}

		while (-e $pausefile)
		{
			print "\rWaiting to resume...";
			Time::HiRes::sleep($levelwait);
		}

		unless ($monitoring)
		{
			$freq = $freq + $step;
			if ($freq > $end)
			{
				$freq = $start;
				repeatheader();
			}
		}

		print "\r";

	}
}

exit;

# Tune into frequency
sub tune
{
	my ($freq, $mode, $curfreq, $name, $fileline, $startfreq, $endfreq, $monitoring) = (@_);

	my $recordstart = 0;
	unless ($monitoring)
	{
		$t->print("F $freq");
		$t->waitfor(Match => '/RPRT/', Timeout => 5, Errmode => "return"); 
		$t->print("M $mode");
		$t->waitfor(Match => '/RPRT/', Timeout => 5, Errmode => "return"); 
	}
	my $level = "n/a";
	if ($levelstop || $monitor)
	{
		Time::HiRes::sleep($levelwait);
		$t->print("l");
		my $prematch;
		($prematch, $level) = $t->waitfor(Match => '/-{0,1}\d+\.\d/', Timeout => 5, Errmode => "return"); 
		chomp($level);
	}
	if ($type eq "scan")
	{
		printf('%12s' . " --- [" . '%12s' . " - " . '%12s' . "] [" . '%s' . "] [" . '%s' . "kHz] [" . '%5s' . "]",$curfreq,$startfreq,$endfreq,$level,$step/1000,$mode);
	}
	else
	{
		printf('%12s' . " - " . "%${namewidth}s" . " - [" . '%5s' . "] [" . '%5s' . "] [Line " . '%3s' . "]",$curfreq,$name,$mode,$level,$fileline);
	}

	# If we're in monitor mode and want to record, do it here
	if ($level ne "" && $level > $delaylevel && $monitoring && $record)
	{
		addactive($freq);
		if ($recordingmonitor eq 0)
		{
			print " (Recording)";
			$recordingmonitor = 1;
			$recordstart = time;
			$t->print("AOS");
			$t->waitfor(Match => '/RPRT/', Timeout => 5, Errmode => "return"); 
		}
		else
		{
			print " (Recording)";
		}
	}
	else
	{
		if ($recordingmonitor)
		{
			$recordingmonitor = 0;
			print "\e[K";
			$recordtime = $recordtime + time - $recordstart;
			$t->print("LOS");
			$t->waitfor(Match => '/RPRT/', Timeout => 5, Errmode => "return"); 
		}
	}

	# If the signal level is above the threshold, stay on this frequency for a while
	if ($levelstop && $level ne "" && $level > $delaylevel && $monitoring eq 0)
	{
		addactive($freq);
		# Start recording
		if ($record)
		{
			$recordstart = time;
			$t->print("AOS");
			$t->waitfor(Match => '/RPRT/', Timeout => 5, Errmode => "return"); 
		}

		if ($wait)
		{
			print " --- Waiting for clear...";
			if ($record) { print "  (Recording)"; }
			print "\n";
			my $waitlevel = 0;
			while ($waitlevel > $delaylevel)
			{
				Time::HiRes::sleep($levelwait);
				$t->print("l");
				my $prematch;
				($prematch, $waitlevel) = $t->waitfor(Match => '/-{0,1}\d+\.\d/', Timeout => 5, Errmode => "return"); 
			}
			Time::HiRes::sleep($delaytime);
		}
		elsif ($stop)
		{
			print " --- Hit enter to continue..";
			if ($record) { print "  (Recording)"; }
			<STDIN>;
		}
		else
		{
			print " --- Signal detected, waiting...";
			if ($record) { print "  (Recording)"; }
			print "\n";
			Time::HiRes::sleep($delaytime);
		}

		# Stop recording
		if ($record)
		{
			$recordtime = $recordtime + time - $recordstart;
			$t->print("LOS");
			$t->waitfor(Match => '/RPRT/', Timeout => 5, Errmode => "return"); 
		}
	}
	else
	{
		Time::HiRes::sleep($pause - $levelwait);
		if ($monitor) { print "\r"; }
		else { print "\n"; }
	}
}

# Load CSV file
sub loadcsv($)
{
	my ($freq) = (@_);
	my $skiptune = 0;
	my $nametest = 0;
	unless (-e "$csv")
	{
		die "Bookmark file does not exist:  $csv\n";
	}
	open(my $csvfile, "<$csv");
	while (my $line = <$csvfile>)
	{
		chomp ($line);
		push(@csv, $line);

		# Get our max name length so our listing is dynamic
		my ($hz,$mode,$name) = split(',',$line);
		if (length($name) > $nametest) { $nametest = length($name); }

		# See if our passed-in frequency is valid to allow resuming
		if ($hz eq $freq) { $skiptune = 1; }
	}
	close(csv);
	if ($nametest <= $namewidth) { $namewidth = $nametest; }
	my $csvlines = @csv;
	print "Loaded $csvlines lines from CSV file\n\n";
	return $skiptune;
}

# Return back ##.### ### format readable frequency string
sub prettyfreq($)
{
	my ($freq) = (@_);
	chomp($freq);
	my $subfreq = substr($freq, -3);
	my $mainfreq = substr($freq, 0, length($freq)-3);
	$mainfreq = sprintf("%.3f", $mainfreq / 1000);
	return "$mainfreq $subfreq";
}

# Print repeat header with some info
sub repeatheader
{
	printf("--- Scan: " . '%02s' . ":" . '%02s' . ":" . '%02s' . ":" . '%02s' . " - Most Active: " . '%s' . " (" . '%s' . ") - Record: " . '%02s' . ":" . '%02s' . ":" . '%02s' . ":" . '%02s' . " ---\n",
		secondstoreadable(time-$timestarted),
		getactive(),
		secondstoreadable($recordtime)
	);

	my $logline = sprintf("Time Scaning: " . '%02s' . ":" . '%02s' . ":" . '%02s' . ":" . '%02s' . " - Most Active: " . '%s' . " (" . '%s' . ") - Time Recording: " . '%02s' . ":" . '%02s' . ":" . '%02s' . ":" . '%02s' . " (" . '%s' . ")\n",
		secondstoreadable(time-$timestarted),
		getactive(),
		secondstoreadable($recordtime),
		($record) ? "Enabled" : "Disabled"
	);
	logfile($logline);
}

# Log to our logfile
sub logfile($)
{
	if (-w $logfile)
	{
		my ($logline) = (@_);
		open(LOGFILE,">>$logfile");
		my $timestamp = logtimestamp();
		print LOGFILE $timestamp . " -- " . $logline;
		close(LOGFILE);
	}
}

# Convert seconds to human readable time
sub secondstoreadable($)
{
	my ($seconds) = (@_);
	my $days = int($seconds/(24*60*60));
	my $hours = ($seconds/(60*60))%24;
	my $mins = ($seconds/60)%60;
	my $secs = $seconds%60;
	return ($days, $hours, $mins, $secs);
}

# Add channel to active
sub addactive($)
{
	my ($freq) = (@_);
	my $found = 0;
	foreach my $key (keys %mostactive)
	{
		if ($freq eq $key)
		{
			$mostactive{$key}++;
			$found++;
		}
	}
	unless ($found) { $mostactive{$freq} = 1; }
}

# Retrieve the most active frequency
sub getactive
{
	my $freq = "na";
	my $count = 0;
	foreach my $key (keys %mostactive)
	{
		if ($mostactive{$key} > $count)
		{
		 	$freq = $key;
			$count = $mostactive{$key};
		}

	}
	unless ($freq eq "na") { $freq = prettyfreq($freq); }
	return ($freq, $count);
}

# Get a pretty timestamp for our logfile
sub logtimestamp
{
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
	my $nice_timestamp = sprintf('%04d' . "-" . '%02d' . "-" . '%02d' . " " . '%02d' . ":" . '%02d' . ":" . '%02d',
		$year+1900,$mon+1,$mday,$hour,$min,$sec);

	return $nice_timestamp;
}

# Make sure we stop recording if we exit
sub signal_handler
{
	print "\e[K";
	print "\n\nDisabling recording and exiting on signal: $!\n";
	$t->print("LOS");
	$t->waitfor(Match => '/RPRT/', Timeout => 5, Errmode => "return"); 
	logfile("Stopped scanning\n");
	exit;
}

# Check command line usage is sane and print some info
sub checkusage
{
	if ($help)
	{
		usage();
	}

	# Convert exclude argument to array, including sci notation
	if ($exclude)
	{
		my @tmp = split(',',$exclude);

		foreach(@tmp)
		{
			my $tmp = $_;
			# If this is a frequency like 28.4e6, convert it to hz
			if ($tmp =~ /\d+e/)
			{
				$tmp = sprintf("%.10g", $_);
			}
			push(@exclude,$tmp);
		}
	}

	if ($delaylevel > 0) { usage("delaylevel"); }

	if ($type eq "file")
	{
		# Accept --channels or --channel as argument for channels

		if ($channels ne "" && $channel == "") { $channel = $channels; }

		unless ($channel ne "" || $dumpchannels || $pattern) { usage($type); }

		if ($channel ne "" && $pattern) { usage($type); }


		# If monitor mode, we're only monitoring one channel
		if ($monitor)
		{
			my @foo;
			($channel,@foo) = split(',',$channel);
			if ($channel =~ /-/)
			{
				($channel,@foo) = split('-',$channel);
			}
		}

		# Convert channel argument to array
		# Comma saparated list of channels or dash separated range
		my @tmpchannels = split(',',$channel);
		foreach(@tmpchannels)
		{
			# If it has a - in it, it's a range, break it apart
			if ($_ =~ /-/)
			{       
			        my ($first,$last) = split('-',$_);
				for (my $i=$first; $i <= $last; $i++)
				{       
					push(@channels,$i);
				}
			}
			else
			{               
				push(@channels,$_);
			}
		}

		if (@channels)
		{
			print "Starting in $type mode scanning for channels: ";
			foreach(@channels) { print "$_ "; }
			print "\n\n";
		}
		elsif ($pattern)
		{
			print "Starting in $type mode scanning for pattern: $pattern\n\n";
		}
		else
		{
			print "Starting in $type mode scanning all channels\n\n";
		}
	}
	elsif ($type eq "scan")
	{
		if ($start eq "" || $end eq "" || $mode eq "") { usage($type); }

		# Require a valid mode
		$mode = uc($mode);
		unless (grep(/$mode/, @modes))
		{
			print "Mode is invalid:  [$mode]\n\nAvailable modes:  ";
			foreach(@modes) { print "$_ "; }
			print "\n";
			exit;
		}

		# Start has to be bigger than end
		if ($end < $start)
		{
			die "$end is less than $start\n";
		}
		unless ($delaylevel =~ /-.*/)
		{
			die "Invalid signal strength:  [$delaylevel]\n";
		}

		# Expand our frequencies if we passed in scientific notation
		$start = sprintf("%.10g", $start);
		$end = sprintf("%.10g", $end);

		my $startfreq = prettyfreq($start);
		my $endfreq = prettyfreq($end);

		print "Starting in $type mode from $startfreq to $endfreq in $mode mode\n";
		print "Signal level delay level of $delaylevel waiting for " . $delaytime . "s\n\n";
	}
	else
	{
		usage();
	}
}

# Print a header of some options we've selected
sub header
{
	if ($dumpchannels)
	{
		print "Dumping channel list and exiting\n\n";
	}

	if ($levelstop)
	{
		if ($wait)
		{
			print "On detection of signal will wait until channel is clear\n\n";
		}

		if ($stop)
		{
			print "On detection of signal will wait for keyboard input\n\n";
		}
	}
	else
	{
		print "Not stopping for signal detection\n\n";
	}

	print "Channel/Frequency pause time:  " . $pause . "s\n";
	print "Delaylevel: [$delaylevel]  Delaytime: [$delaytime]\n\n";
}

# Sanity check our usage and parameters
sub usage
{
	my ($text) = (@_);

	print "$0 - Control GRQX to scan.\n\n";

	print "$0 --type [file scan] --help for mode help on each mode\n\n";

	print "All frequencies are given in Hz, but can be given in scientific notation\n";
	print "if desired.  ie:  28.410e6 and 28410000 are equivalent.\n\n";

	print "Scan mode operations:\n\n";
	print "--start 28400000		Start at frequency 28.400\n";
	print "--end 28410000 			Stop at frequency 28.410\n";
	print "--mode USB			Scan in USB demodulation\n";
	print "--step 250			Step by 250mhz in frequency scanning mode (default: $step)\n\n";

	print "File mode options:\n\n";
	print "--channels 19,20,30		Scan channels 19, 20, and 30\n";
	print "--channels 19-30		Scan channels 19 through 30\n";
	print "--pattern \"FRS|GMR|^145\"	Scan channels named FRS or GMR or frequencies starting with 145\n";
	print "--showall			Show all channels even if skipped\n";
	print "--dumpchannels			Show all channels, do not tune any\n\n";

	print "General scan or file options:\n\n";
	print "--pause 2			Wait 2 seconds between frequencies/channels (default: $pause)\n";
	print "--exclude 28.401e6,28.410e6	Exclude frequency 28 401 and 28 410\n";
	print "--monitor			Monitor a single frequency or channel\n\n";

	print "Signal detection options:\n\n";
	print "--delaylevel=-30		Delay scanning if a signal of -30 or better is heard (default: $delaylevel)\n";
	print "--delaytime 10			Delay scanning for 10s when a signal is detected (default: $delaytime)\n";
	print "--record			Record when signal is detected (default: 0)\n";
	print "--stop				Stop scanning until the enter key is hit (default: 0)\n";
	print "--wait				Stop scanning until the channel is clear (default: 0)\n";
	print "--levelstop=0			Do not pause to listen for signal (default: $levelstop)\n";

	if ($text eq "scan")
	{
		print "\n\nMode $text detected but missing required parameters\n\n";
		unless ($start) { print "--start freq required\n"; }
		unless ($end) { print "--end freq required\n"; }
		unless ($mode) { print "--mode mode required\n"; }
	}

	if ($text eq "file")
	{
		print "\n\nMode $text detected but missing required parameters\n\n";
		unless ($channel ne "" || $channels ne "" || $pattern) { print "--channels or --pattern required\n"; }
		if ($channel && $pattern) { print "--channel and --pattern are exclusive options\n"; }
	}

	if ($text eq "delaylevel")
	{
		print "\n\n--delaylevel must be less than or equal to 0\n\n";
	}

	exit;
}

